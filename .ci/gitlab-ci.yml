variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_PROJECT_PATH-$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive

before_script:

stages:
  - build
  - test-and-tag
  - binary-release
  - dependents
  - nightly
  - deploy-and-cleanup

.build-template: &build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker pull $DOCKER_REGISTRY/synthesis/sel/${OS}-${LISP}:${CI_BUILD_REF_NAME} && export REF=${CI_BUILD_REF_NAME} || export REF=master
    - if [ ${REF} = "master" ];then
          docker pull $DOCKER_REGISTRY/synthesis/sel/${OS}-${LISP}:master;
      fi
    - echo "OS=${OS} LISP=${LISP} REF=${REF}"
    - docker build --build-arg=GT=yes --build-arg=LISP=${LISP} --build-arg=REF=${REF} -f .ci/Dockerfile.${OS} -t ${LOCAL_IMAGE_NAME}-${OS}-${LISP} .
    - if [ ! "$CI_BUILD_REF_NAME" = "latest" ];
      then
          docker tag ${LOCAL_IMAGE_NAME}-${OS}-${LISP} $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${LISP}:${CI_BUILD_REF_NAME};
          docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
          docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS}-${LISP}:${CI_BUILD_REF_NAME};
      fi

build-ubuntu-ccl:
  stage: build
  variables:
    OS: 'ubuntu'
    LISP: 'ccl'
  <<: *build

build-ubuntu-sbcl:
  stage: build
  variables:
    OS: 'ubuntu'
    LISP: 'sbcl'
  <<: *build

build-arch-ccl:
  stage: build
  variables:
    OS: 'arch'
    LISP: 'ccl'
  <<: *build

build-arch-sbcl:
  stage: build
  variables:
    OS: 'arch'
    LISP: 'sbcl'
  <<: *build

.run-template: &run
  script:
    # If on master branch, push test results to DataManager and push
    # up a new "latest" image, otherwise, run locally.
    - if [ "$CI_BUILD_REF_NAME" = "master" ];
      then
          docker run -e LOCAL_USER=root -e GT=yes -e REPORT=yes ${LOCAL_IMAGE_NAME}-${OS}-${LISP} /bin/bash -c "cd /root/quicklisp/local-projects/resolve && make check bin-check doc";
          if [ "$LISP" = "sbcl" ];
          then
              docker tag ${LOCAL_IMAGE_NAME}-${OS}-${LISP} $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS};
              docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
              docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/${OS};
          fi
      else
          docker run -e LOCAL_USER=root -e GT=yes ${LOCAL_IMAGE_NAME}-${OS}-${LISP} /bin/bash -c "cd /root/quicklisp/local-projects/resolve && unbuffer make check doc";
      fi

run-ubuntu-ccl:
  stage: test-and-tag
  variables:
    OS: 'ubuntu'
    LISP: 'ccl'
  <<: *run

run-ubuntu-sbcl:
  stage: test-and-tag
  variables:
    OS: 'ubuntu'
    LISP: 'sbcl'
  <<: *run

run-arch-ccl:
  stage: test-and-tag
  variables:
    OS: 'arch'
    LISP: 'ccl'
  <<: *run

run-arch-sbcl:
  stage: test-and-tag
  variables:
    OS: 'arch'
    LISP: 'sbcl'
  <<: *run

build-binary-release:
  stage: binary-release
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker pull $DOCKER_REGISTRY/$CI_PROJECT_PATH/ubuntu
    - docker build --build-arg=DD=yes --build-arg=REF=$DOCKER_REGISTRY/$CI_PROJECT_PATH/ubuntu -f .ci/Dockerfile.binary-release -t $DOCKER_REGISTRY/$CI_PROJECT_PATH/binary-release .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH/binary-release
  only:
    - master

trigger_bug-injector:
  stage: dependents
  script:
    - "curl -X POST -F token=eb76bc2f8009af7005b43bf8f63bb0 -F ref=$CI_BUILD_REF_NAME https://git.grammatech.com/api/v4/projects/347/trigger/pipeline"
  only:
    - master

# pages:
#   stage: deploy-and-cleanup
#   script:
#     - export CONTAINER_FILE=${LOCAL_IMAGE_NAME}-arch-sbcl.container
#     - mkdir -p $(dirname ${CONTAINER_FILE})
#     - docker run -e LOCAL_USER=root -e GT=yes --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-arch-sbcl /bin/bash -c "mkdir -p /public && cd /root/quicklisp/local-projects/resolve && make doc && cp -R doc/resolve/* /public/"
#     - docker cp $(cat ${CONTAINER_FILE}):/public ./
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-arch-ccl
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-arch-sbcl
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu-ccl
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu-sbcl
#   artifacts:
#     paths:
#       - public
#   only:
#     - master

cleanup:
  stage: deploy-and-cleanup
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-arch-ccl
    - docker rmi -f ${LOCAL_IMAGE_NAME}-arch-sbcl
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu-sbcl
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu-ccl
  except:
    - master
