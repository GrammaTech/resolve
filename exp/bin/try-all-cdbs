#!/bin/bash
#
# Usage: try-all-cdbs [OPTION]... REPOSITORY...
#  Try to build every CDB in every REPOSITORY
#
# OPTIONS:
#   -h,--help ---------- print this help information
#   -o,--outdir DIR ---- Save results to outdir
#                        defaults to the current directory
#   -d, --docker DOCK -- Base docker images off of DOCK
#   -c, --clean -------- clean up docker images
#
OUTDIR=$(pwd)
SCRIPT="$0"
INNER_SCRIPT="$(dirname $(readlink -f ${SCRIPT}))/try-all-cdbs-in-image-loop.sh"
DOCK=
CLEAN=
help(){
    local HELP_TEXT=$(cat "$SCRIPT" \
        |sed '/^[^#]/q' \
        |head -n -1 \
        |tail -n +3 \
        |sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' \
        |cut -c3-)
    echo "$HELP_TEXT"
    exit 1
}

eval set -- $(getopt -o ho:d:c -l help,outdir:,docker:,clean -- "$@" || help;)
while [ $# -gt 0 ];do
    case $1 in
        -h|--help) help;;
        -o|--outdir) OUTDIR=$(readlink -f $2); shift;;
        -d|--docker) DOCK=$2; shift;;
        -c|--clean) CLEAN=yes;;
        (--) shift; break;;
        (-*) error "unrecognized option $1";;
        (*)  break;;
    esac
    shift
done

if [ -z $1 ];then
    help
fi

for REPO in $@;do
  pushd $REPO
  IMAGE="$(basename $REPO)-cdb"
  git checkout master -- gt-harness.sh
  ./gt-harness.sh docker ${IMAGE} ${DOCK}
  docker run -v ${INNER_SCRIPT}:/try-all-cdbs-in-image-loop.sh -v ${OUTDIR}:/cdbs ${IMAGE} /try-all-cdbs-in-image-loop.sh
  if [ ! -z ${CLEAN} ];then
    docker rmi -f ${IMAGE}
  fi
  popd
done
