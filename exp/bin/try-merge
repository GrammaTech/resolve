#!/bin/bash
#
# Usage: try-merge REPO HASH-BASE HASH-LEFT HASH-RIGHT [-- DIFF-OPTIONS...]
#  Computes a diff of the merge from HASH-BASE to
#  HASH-LEFT and HASH-RIGHT.
#
#  REPO as the base repository holding all hashes.
#
# OPTIONS:
#   -h,--help ---------- print this help information
#   -d,--diff ---------- diff tool to use to compute patches
#                        default to diff3
#   -l,--local --------- pass the 'local' option to git clone
#   -w,--workdir ------- set the working directory
#                        defaults to the current directory
#   --bear, -b --------- Use bear to make compilation databases
#
LOCAL=
WORKDIR=$(pwd)
DIFF=diff3
SCRIPT="$0"
BEAR=
help(){
    local HELP_TEXT=$(cat "$SCRIPT" \
        |sed '/^[^#]/q' \
        |head -n -1 \
        |tail -n +3 \
        |sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' \
        |cut -c3-)
    echo "$HELP_TEXT"
    exit 1
}

eval set -- $(getopt -o hlw:d: -l help,local,workdir:,diff: -- "$@" || help;)
while [ $# -gt 0 ];do
    case $1 in
        -h|--help) help;;
        -l|--local) LOCAL=--local;;
        -w|--workdir) WORKDIR=$(readlink -f $2); shift;;
        -d|--diff) DIFF=$2; shift;;
        -b|--bear) BEAR=--bear;;
        (--) shift; break;;
        (-*) error "unrecognized option $1";;
        (*)  break;;
    esac
    shift
done
if [ -z $1 ] || [ -z $2 ] || [ -z $3 ] || [ -z $4 ];then
    help
else
  # This use of readlink should either resolve the absolute path for
  # files or keep the original value for git:// or http:// URLs.
  REPO=$(readlink -f $1 || echo $1)
  NAME=$(basename $REPO .git)
  BASE=$2
  LEFT=$3
  RIGHT=$4
  shift;shift;shift;shift;
fi
DIFFNAME=$(basename ${DIFF})
RESULT_DIR=${WORKDIR}/${NAME}-${BASE}-${LEFT}-${RIGHT}

if [ ! -d  ${RESULT_DIR} ];then
  mkdir -p ${RESULT_DIR}
fi
cd $WORKDIR;

# TODO: Should expand REPO with readlink -f, relative to the starting dir.
for dir in base left right;do
  if [ ! -d ${NAME}-${dir} ];then
    git clone ${LOCAL} ${REPO} ${NAME}-${dir} -q >/dev/null
  fi
done
(cd $WORKDIR/${NAME}-base; git reset --hard ${BASE} >/dev/null; git checkout origin/master -- gt-harness.sh)
(cd $WORKDIR/${NAME}-left;  git reset --hard ${LEFT} >/dev/null; git checkout origin/master -- gt-harness.sh)
(cd $WORKDIR/${NAME}-right;  git reset --hard ${RIGHT} >/dev/null; git checkout origin/master -- gt-harness.sh)

if [ -n ${BEAR} ]; then
    (cd $WORKDIR/${NAME}-base; bear ./gt-harness.sh build)
    (cd $WORKDIR/${NAME}-left; bear ./gt-harness.sh build)
    (cd $WORKDIR/${NAME}-right; bear ./gt-harness.sh build)
fi


for file in $(cd $WORKDIR/${NAME}-base;git diff --name-only $LEFT $RIGHT --); do
  mkdir -p ${RESULT_DIR}/$(dirname $file)
  if [ ! -f ${NAME}-base/${file} ];then
    touch ${RESULT_DIR}/${file}.no-base;
  elif [ ! -f ${NAME}-left/${file} ];then
    touch ${RESULT_DIR}/${file}.no-left;
  elif [ ! -f ${NAME}-right/${file} ];then
    touch ${RESULT_DIR}/${file}.no-right;
  else
      CMD="${DIFF} $@ ${NAME}-left/${file} ${NAME}-base/${file} ${NAME}-right/${file}"
      # echo ${CMD}
      OUT="$(${CMD})"
    ERR=$?
    rm -f ${RESULT_DIR}/${NAME}-base/${file}.${DIFFNAME}.*
    case $ERR in
      # Delete file if no conflict.
      0) echo "${OUT}" > ${RESULT_DIR}/${file}.${DIFFNAME}.0;;
      # Name file if conflict.
      1) echo "${RESULT_DIR}/${file}"
         echo "${OUT}" > ${RESULT_DIR}/${file}.${DIFFNAME}.1;;
      # Report an error if exit 2 or greater.
      *) echo "${RESULT_DIR}/${file}*$ERR"
         echo "${OUT}" > ${RESULT_DIR}/${file}.${DIFFNAME}.$ERR;;
    esac
  fi
done
