#+Title: Related Work.

* Papers
** Evaluating and improving semistructured merge
https://spgroup.github.io/s3m/eis.html
https://github.com/guilhermejccavalcanti/jFSTMerge

** Fine-grained and accurate source code differencing
 They provide a tool for accessing the "edit script" encapsulating the
 evolution of a software project.  The tool goes beyond line-by-line
 edits to capture abstract syntax tree edits, including *moves* of
 code.

 Tow problems in state of the art AST differencing.
 1. Handling move actions.
 2. Scaling to fine-grained ASTs with thousands of nodes.

 Edit actions
 - updateValue :: changes the value of a node
 - add :: adds a node
 - delete :: removes a node
 - move :: moves a node

 Heuristic edit script generation (in two phases).
 1. Establish a mapping between nodes.
 2. Based on the mapping deduce the edit script.

*** Architecture
 :  file1.c------+   +---->AST1----+
 :               v   |             v
 :               Parser          Mapping---->Actions
 :               ^   |             ^            |
 :  file2.c------+   +---->AST2----+            v
 :                                          Edit Script

 - Parser used is customizable.

*** \sect 5.1 Research questions
 - RQ1 :: Does GumTree do a good job.
 - RQ2 :: Is GumTree better than =diff=.

 Answered with review of 144 revisions by 3 independent reviewers.

*** \sect 5.2 automatic evaluation
 Compared against RTED and ChangeDistiller.

*** \sect 5.3 Comparison of moves between GT and CD
 Claiming GT moves are more precise.
** Accurate and Efficient Refactoring Detection in Commit History
** IntelliMerge: a refactoring-aware software merging technique
They compare against what they claim is the leading semi-structured
merge tool for Java, [[*Evaluating and improving semistructured merge][Evaluating and improving semistructured merge]].

Their technique does "top down" and "bottom up" merging.  The "top
down" bit uses /signatures/ to identify elements which are consistent
between versions.  This is useful in that it allows them to detect
moves and to reduce the merging problem.
- They can find moves between files by looking for signature matches.
- They throw away as much as possible as quickly as possible
- For subsequent "bottom-up" matching they pool by program element
  kind reducing the size/complexity.

Their bottom-up merging doesn't actually replay specific refactorings,
but they have two types 1-1 easy and m-n hard heuristics for matching,
each of these classes of heuristics match big sets of types of
refactorings.  I'm not clear how they merge the refactorings (didn't
get that far).

Relevant references to follow:
- jFSTMerge [[*Evaluating and improving semistructured merge][Evaluating and improving semistructured merge]]
- Gumtree [[*Fine-grained and accurate source code differencing][Fine-grained and accurate source code differencing]]
- RefactoringMiner [[*Accurate and Efficient Refactoring Detection in Commit History][Accurate and Efficient Refactoring Detection in Commit History]]

Notes:
- We should treat top-level "moves" (which we should identify with
  signatures) differently from promotions/demotions (which we can
  handle by extending our existing tree differencing).
- It might be interesting to try to explode a single big commit into
  smaller edits, each of which are "between" either side of the big
  change and which also parse or pass the test suite (or some other
  quality metric).

** An Empirical Examination of the Relationship Between Code Smells and Merge Conflicts

** On the Nature of Merge Conflicts: a Study of 2,731 Open Source Java Projects Hosted by GitHub (TSE 2018)

** Understanding semi-structured merge conflict characteristics in open-source Java projects （EMSE 2018）

** Automatic Software Merging Using Automated Program Repair （IBF）

** A state-of-the-art survey on software merging
  :PROPERTIES:
  :TITLE:    A state-of-the-art survey on software merging
  :BTYPE:    article
  :CUSTOM_ID: mens2002state
  :AUTHOR:   Mens, Tom
  :JOURNAL:  IEEE transactions on software engineering
  :VOLUME:   28
  :NUMBER:   5
  :PAGES:    449--462
  :YEAR:     2002
  :PUBLISHER: IEEE
  :END:

A survey paper which should be read and cited.
#+begin_quote
5.6    Degree of Automation

Merge tools can range from a manual--and often timeconsuming--process,
over a semiautomated process that requires interaction with the user,
to a fully automated approach. While differencing and conflict
detection is usually fully automatic, conflict resolution is typically
interactive. Only in very specific situations is it possible to fully
automate the merge process. In the flexible merge framework of Munson
and Dewan [43], one can make a fine-grained combination of interactive
and automatic approaches.

In order to resolve merge conflicts in an automated way, one can
resort to automatic or default conflict resolution strategies [2],
[42], [43]. For example, if all changes are tagged with a timestamp,
we can decide to keep the entity with the most recent timestamp in
case of a conflict.  Another strategy would be to keep a list of user
priorities and the change by the user with the highest priority is
included in the result.n

Although using default resolution strategies is useful, it is not
foolproof. Occasionally, the proposed solution needs to be revised
manually after the merge has been performed because the merge tool
took the wrong decision. Additionally, some conflicts are too complex
to be resolved in an automatic way. For these conflicts, user
interaction will always be required.
#+end_quote

Related to tree differencing.
#+begin_quote
If we want to perform syntactic merging, we first need to compare the
delta between two syntax representations 0e.g., parse trees). Yang
[66] describes a comparison tool for detecting syntactic differences
between programs. An example of a syntactic delta algorithm
specifically destined to find the difference between UML TM diagrams
is the Rational Rose TM Visual Differencing tool.

If we prefer semantic merging, we need to calculate semantic
differences between two versions of a program.  This is achieved by
Semantic Diff [31], which expresses its results in terms of the
observable input-output behavior.
#+end_quote

** Merging models based on given correspondences
  :PROPERTIES:
  :TITLE:    Merging models based on given correspondences
  :BTYPE:    inproceedings
  :CUSTOM_ID: pottinger2003merging
  :AUTHOR:   Pottinger, Rachel A and Bernstein, Philip A
  :BOOKTITLE: Proceedings of the 29th international conference on Very large data bases-Volume 29
  :PAGES:    862--873
  :YEAR:     2003
  :ORGANIZATION: VLDB Endowment
  :END:
Presents an algorithm for merging /models/ ("a formal description of a
complex application artifact").  Doesn't appear to claim to fully
automate conflict resolution, only to generalize pre-existing merge
algorithms for more specific structures (e.g., only for XML).

** Abstract Semantic Differencing via Speculative Correlation
  :PROPERTIES:
  :TITLE:    Abstract Semantic Differencing via Speculative Correlation
  :BTYPE:    inproceedings
  :CUSTOM_ID: Partush:2014:ASD:2660193.2660245
  :AUTHOR:   Partush, Nimrod and Yahav, Eran
  :BOOKTITLE: Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages \& Applications
  :SERIES:   OOPSLA '14
  :YEAR:     2014
  :ISBN:     978-1-4503-2585-1
  :LOCATION: Portland, Oregon, USA
  :PAGES:    811--828
  :NUMPAGES: 18
  :URL:      http://doi.acm.org/10.1145/2660193.2660245
  :DOI:      10.1145/2660193.2660245
  :ACMID:    2660245
  :PUBLISHER: ACM
  :ADDRESS:  New York, NY, USA
  :KEYWORDS: abstract interpretation, differential analysis, equivalence checking, numerical domains, patches, semantic diff
  :END:
They use a correlating abstract domain that lets them calculate
differences between any two interleavings of a program.

They present a speculative search algorithm to find an interleaving
with minimal abstract semantic difference.
** Semantic Diff: A Tool for Summarizing the Effects of Modifications.
  :PROPERTIES:
  :TITLE:    Semantic Diff: A Tool for Summarizing the Effects of Modifications.
  :BTYPE:    inproceedings
  :CUSTOM_ID: jackson1994semantic
  :AUTHOR:   Jackson, Daniel and Ladd, David A and others
  :BOOKTITLE: ICSM
  :VOLUME:   94
  :PAGES:    243--252
  :YEAR:     1994
  :END:
Expresses differences between two versions of a procedure by looking
at the relations between their I/O behavior.

Uses static analysis to determine dependence behavior between
variables in the procedure, and then compares these dependency
relations between the different versions of the procedure.
** Identifying syntactic differences between two programs
  :PROPERTIES:
  :TITLE:    Identifying syntactic differences between two programs
  :BTYPE:    article
  :CUSTOM_ID: yang1991identifying
  :AUTHOR:   Yang, Wuu
  :JOURNAL:  Software: Practice and Experience
  :VOLUME:   21
  :NUMBER:   7
  :PAGES:    739--755
  :YEAR:     1991
  :PUBLISHER: Wiley Online Library
  :END:
Present a tree-based differencing engine which prints the two programs
"synchronously" with the differences highlighted.
** Verified three-way program merge
** An Efficient Algorithm for Type-Safe Structural Diffing
** Automatic Software Merging using Automated Program Repair
- Repository -- https://github.com/stan6/mergeconflict
** Software merge: semantics of combining changes to programs
** Semistructured merge: rethinking merge in revision control systems
** Extensible language-aware merging
** Syntactic software merging
** Balancing precision and performance in structured merge
Why do no practical structured-merge tools exist for mainstream
programming languages?
1. tools must commit to a particular language, so have to use a
   different tool for every language
2. structured merge algorithms are typically cubic

Their solution to speed issues is to "auto-tune" their merge algorithm
and only do structured when a conflict is detected.

Important to note that structured merge can help by understanding when
movement can be semantics preserving.  E.g., order of definition of
methods doesn't matter.

Language-specific properties useful for structured merge
- order does or does not matter for children of different elements
- some elements have a fixed number of children

Figure 1 has good examples of semantics mattering.
- it can realize conflicts aren't real
- it can find conflicts *not* found by line-based perge

Notes data-flow can be useful.  Consider LLVM-assisted merge?

Section 3.2.1 gives implementation details.  Could be useful if we
decide to implement something similar.

Results
- 60% more conflicts detected than unstructured (because of ordering
  things), with 21% fewer lines of conflict (smaller conflicts)
- 5% of changed files can not be merged with normal merge, 2% with
  structured merge

** The life-cycle of merge conflicts: processes, barriers, and strategies
Conducted semi-structured interviews with developers to discuss
merges.
- developers defer responding to conflicts based on their perception
  of the complexity, this deferral affects the whole team
- developers visually view code to evaluate their resolution
- perceptions alter the impact of tools to aid in merge

General notes and background
- Report conflicts in 19% of all merges
- Developers are more concerned with the complexity of the merged code
  over the size of the conflicts to be resolved
- discussion of other "operations-based merging" techniques which
  record and replay series of edits to good effect (requires editor
  integration)

Interview results
- in developer "evaluation phase" some just compile, some also test,
  some manually review
- some developers use tools like "pager duty" to get notices of
  conflicts so they can quickly push fixes so they don't get "broken
  code"
- some monitor commits to avoid conflicts in VC because they don't
  understand git
- developers interested in merging quickly to avoid things getting
  worse
** A Study of Merge-Conflict Resolutions in Open-Source Software
Chalmers university of technology Masters Thesis.

See also [[*Comprehending How Merge Conflicts Developed in an Open Source Software Project][Comprehending How Merge Conflicts Developed in an Open Source Software Project]].

** Comprehending How Merge Conflicts Developed in an Open Source Software Project
** Integrating noninterfering versions of programs
First Reps publication with his wife.

Cite related to merging and automatic merge conflict resolution.

** Identifying the semantic and textual differences between two versions of a program
** Using semantic differencing to reduce the cost of regression testing

* Patents
** Automatic synchronization conflict resolution 
https://patents.google.com/patent/US20110218964A1/en

Differences noticed between two computing devices.  Then "rule-based"
conflict resolution is performed ("based at least in part on a type of
the change" made at each computing device) to resolve the conflicts,
and a notice of the resolution is sent to the second computing device.

** Digital document change conflict resolution
https://patents.google.com/patent/US20160034433A1/en

Resolve conflicts by asking the user or by applying "conflict
resolution rule(s)" to choose between the first and second changes.

** Automatic conflict resolution 
https://patents.google.com/patent/US20110004702A1/en

A file of condition/action tuples is read and used to pre-process
conflicting files before a merge is performed.

** Collaborative model for software systems with synchronization submodel with merge feature, automatic conflict resolution and isolation of potential changes for reuse
https://patents.google.com/patent/US6678882B1/en

This looks related, but super-high level and vague.  Lots of talk of
human actors collaborating by sharing objects.

** Automated merging in a software development environment 
https://patents.google.com/patent/US20090210852A1/en

Talks a lot about "worklists" of elements which should and should not
be merged.  Only talk about conflicts is manual.

** Pre-merge conflict avoidance 
https://patents.google.com/patent/US20130036400A1/en

A system to notify a developer (presumably on commit) that there are
potentially conflicting changes in other developers versions of the
code.

